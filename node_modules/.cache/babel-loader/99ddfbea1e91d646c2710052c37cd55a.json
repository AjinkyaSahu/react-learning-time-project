{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { isPersistedState } from \"../helpers\";\nimport API from \"../API\";\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setstate] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const fetchMovieData = async () => {\n    try {\n      setLoading(true);\n      setError(false);\n      const movie = await API.fetchMovie(movieId);\n      const credits = await API.fetchCredits(movieId); // get directors only\n\n      const directors = credits.crew.filter(member => member.job === \"Director\");\n      setstate({ ...movie,\n        actors: credits.cast,\n        directors\n      });\n      setLoading(false);\n    } catch (error) {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    const sessionState = isPersistedState(movieId);\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n      return;\n    }\n\n    fetchMovie();\n  }, [movieId]); // Write to sessionStorage\n\n  useEffect(() => {\n    sessionStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"atI7786gZX11v5ljeiDycoa28q4=\");","map":{"version":3,"sources":["/home/ajinkya/Resources/React/movie-app/src/hooks/useMovieFetch.js"],"names":["useEffect","useState","isPersistedState","API","useMovieFetch","movieId","state","setstate","error","setError","loading","setLoading","fetchMovieData","movie","fetchMovie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast","sessionState","setState","sessionStorage","setItem","JSON","stringify"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMW,cAAc,GAAG,YAAY;AAC/B,QAAI;AACAD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,YAAMI,KAAK,GAAG,MAAMV,GAAG,CAACW,UAAJ,CAAeT,OAAf,CAApB;AACA,YAAMU,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAJ,CAAiBX,OAAjB,CAAtB,CALA,CAMA;;AACA,YAAMY,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACbC,MAAD,IAAYA,MAAM,CAACC,GAAP,KAAe,UADb,CAAlB;AAIAd,MAAAA,QAAQ,CAAC,EACL,GAAGM,KADE;AAELS,QAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFX;AAGLN,QAAAA;AAHK,OAAD,CAAR;AAMAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAlBD,CAkBE,OAAOH,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAtBD;;AAwBAT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,YAAY,GAAGtB,gBAAgB,CAACG,OAAD,CAArC;;AAEA,QAAImB,YAAJ,EAAkB;AACdC,MAAAA,QAAQ,CAACD,YAAD,CAAR;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAEDG,IAAAA,UAAU;AACb,GAVQ,EAUN,CAACT,OAAD,CAVM,CAAT,CA7BsC,CAyCtC;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,cAAc,CAACC,OAAf,CAAuBtB,OAAvB,EAAgCuB,IAAI,CAACC,SAAL,CAAevB,KAAf,CAAhC;AACH,GAFQ,EAEN,CAACD,OAAD,EAAUC,KAAV,CAFM,CAAT;AAGA,SAAO;AAAEA,IAAAA,KAAF;AAASI,IAAAA,OAAT;AAAkBF,IAAAA;AAAlB,GAAP;AACH,CA9CM;;GAAMJ,a","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { isPersistedState } from \"../helpers\";\n\nimport API from \"../API\";\n\nexport const useMovieFetch = (movieId) => {\n    const [state, setstate] = useState([]);\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(true);\n\n    const fetchMovieData = async () => {\n        try {\n            setLoading(true);\n            setError(false);\n\n            const movie = await API.fetchMovie(movieId);\n            const credits = await API.fetchCredits(movieId);\n            // get directors only\n            const directors = credits.crew.filter(\n                (member) => member.job === \"Director\"\n            );\n\n            setstate({\n                ...movie,\n                actors: credits.cast,\n                directors,\n            });\n\n            setLoading(false);\n        } catch (error) {\n            setError(true);\n        }\n    };\n\n    useEffect(() => {\n        const sessionState = isPersistedState(movieId);\n\n        if (sessionState) {\n            setState(sessionState);\n            setLoading(false);\n            return;\n        }\n\n        fetchMovie();\n    }, [movieId]);\n\n    // Write to sessionStorage\n    useEffect(() => {\n        sessionStorage.setItem(movieId, JSON.stringify(state));\n    }, [movieId, state]);\n    return { state, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}