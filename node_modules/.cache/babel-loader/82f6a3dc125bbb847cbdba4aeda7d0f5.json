{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport API from \"../API\";\nimport { isPersistedState } from \"../helpers\";\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n      console.log(state);\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (!searchTerm) {\n      const sessionState = isPersistedState(\"homeState\");\n\n      if (sessionState) {\n        console.log(\"Grabbing from sessionStorage\");\n        setState(sessionState);\n        return;\n      }\n    }\n\n    console.log(\"Grabbing from API\");\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]); // Load More\n\n  useEffect(() => {\n    if (!isLoadingMore) return;\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]); // Write to sessionStorage\n\n  useEffect(() => {\n    if (!searchTerm) sessionStorage.setItem(\"homeState\", JSON.stringify(state));\n  }, [searchTerm, state]);\n  return {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    isLoadingMore,\n    setIsLoadingMore\n  };\n};\n\n_s(useHomeFetch, \"lJiroHIivuxMlWMzKV0OWgPorJI=\");","map":{"version":3,"sources":["/home/ajinkya/Resources/React/movie-app/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","API","isPersistedState","initialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","fetchMovies","movies","prev","console","log","sessionState","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport API from \"../API\";\n\nimport { isPersistedState } from \"../helpers\";\n\nconst initialState = {\n    page: 0,\n    results: [],\n    total_pages: 0,\n    total_results: 0,\n};\n\nexport const useHomeFetch = () => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [state, setState] = useState(initialState);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n    const fetchMovies = async (page, searchTerm = \"\") => {\n        try {\n            setError(false);\n            setLoading(true);\n\n            const movies = await API.fetchMovies(searchTerm, page);\n\n            setState((prev) => ({\n                ...movies,\n                results:\n                    page > 1\n                        ? [...prev.results, ...movies.results]\n                        : [...movies.results],\n            }));\n            console.log(state);\n        } catch (error) {\n            setError(true);\n            console.log(error);\n        }\n\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        if (!searchTerm) {\n            const sessionState = isPersistedState(\"homeState\");\n\n            if (sessionState) {\n                console.log(\"Grabbing from sessionStorage\");\n                setState(sessionState);\n                return;\n            }\n        }\n        console.log(\"Grabbing from API\");\n        setState(initialState);\n        fetchMovies(1, searchTerm);\n    }, [searchTerm]);\n\n    // Load More\n    useEffect(() => {\n        if (!isLoadingMore) return;\n\n        fetchMovies(state.page + 1, searchTerm);\n        setIsLoadingMore(false);\n    }, [isLoadingMore, searchTerm, state.page]);\n\n    // Write to sessionStorage\n    useEffect(() => {\n        if (!searchTerm)\n            sessionStorage.setItem(\"homeState\", JSON.stringify(state));\n    }, [searchTerm, state]);\n\n    return {\n        state,\n        loading,\n        error,\n        searchTerm,\n        setSearchTerm,\n        isLoadingMore,\n        setIsLoadingMore,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}